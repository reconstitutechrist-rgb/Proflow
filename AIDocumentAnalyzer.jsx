
import React, { useState, useEffect, useMemo } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Progress } from "@/components/ui/progress";
import { 
  Brain, 
  FileText, 
  CheckCircle, 
  AlertTriangle, 
  Clock,
  Zap,
  Users,
  Link2,
  Target,
  Play,
  RefreshCw,
  Loader2,
  Lightbulb,
} from "lucide-react";
import { useWorkspace } from "../workspace/WorkspaceContext";
import toast from "react-hot-toast";

// Temporary mock for base44 based on the outline's usage
// In a real application, replace this with actual imports or global availability
const base44 = {
  entities: {
    Document: {
      update: async (id, data) => {
        // console.log(`Mocking base44.entities.Document.update for ID: ${id}`, data);
        return Promise.resolve({ id, ...data });
      }
    }
  },
  integrations: {
    Core: {
      InvokeLLM: async ({ prompt, response_json_schema }) => {
        // console.log("Mocking base44.integrations.Core.InvokeLLM with prompt:", prompt);
        // Simulate LLM response based on the new schema from the outline
        const mockResponse = {
          summary: "This is a concise summary generated by the AI, highlighting the main points of the document for quick understanding.",
          key_points: [
            "Point 1: Identified a critical dependency for project completion.",
            "Point 2: Outlined the revised budget allocation for Q4 operations.",
            "Point 3: Key stakeholders involved in the decision-making process.",
            "Point 4: New security protocols to be implemented by end of month."
          ],
          entities: [
            { name: "Jane Doe", type: "Person", confidence: 92 },
            { name: "December 31, 2024", type: "Date", confidence: 88 },
            { name: "Headquarters", type: "Location", confidence: 85 },
            { name: "Feature X", type: "Feature", confidence: 90 },
            { name: "Requirement A", type: "Requirement", confidence: 95 }
          ],
          completeness_score: 78,
          potential_gaps: [
            "Detailed implementation plan for new protocols is missing.",
            "Impact assessment on existing systems not fully documented."
          ]
        };
        return Promise.resolve(mockResponse);
      }
    }
  }
};


export default function AIDocumentAnalyzer({ document, onAnalysisComplete }) {
  const [analyzing, setAnalyzing] = useState(false);
  const [analysis, setAnalysis] = useState(null); // Initial state set to null, will be loaded by useEffect

  const { currentWorkspaceId } = useWorkspace();

  useEffect(() => {
    if (document && currentWorkspaceId) {
      // CRITICAL: Validate document is in current workspace
      if (document.workspace_id !== currentWorkspaceId) {
        toast.error("Cannot analyze documents from other workspaces");
        console.error("Security violation: Cross-workspace document analysis attempt", {
          documentWorkspace: document.workspace_id,
          currentWorkspace: currentWorkspaceId
        });
        // Clear analysis if document changes to one not in current workspace
        setAnalysis(null);
        return;
      }

      // Load existing analysis if available and completed
      if (document.ai_analysis?.analysis_status === 'completed' || document.ai_analysis?.analysis_status === 'failed') {
        setAnalysis(document.ai_analysis);
      } else {
        // If analysis is pending or processing, or doesn't exist, reset state
        setAnalysis(null);
      }
    }
  }, [document, currentWorkspaceId]);

  // Derived status for UI rendering
  const derivedAnalysisStatus = useMemo(() => {
    if (analyzing) {
      return 'processing';
    }
    if (analysis && analysis.analysis_status) {
      return analysis.analysis_status;
    }
    // Fallback to document's ai_analysis status if not yet loaded into local state 'analysis'
    if (document?.ai_analysis?.analysis_status) {
        return document.ai_analysis.analysis_status;
    }
    return 'pending';
  }, [analyzing, analysis, document?.ai_analysis]);


  const handleAnalyze = async () => {
    if (!document || !currentWorkspaceId) {
      toast.error("Document or workspace context is missing.");
      return;
    }

    // CRITICAL: Double-check workspace before analysis
    if (document.workspace_id !== currentWorkspaceId) {
      toast.error("Cannot analyze documents from other workspaces");
      console.error("Security violation: Cross-workspace document analysis attempt");
      return;
    }

    setAnalyzing(true);
    setAnalysis({ ...analysis, analysis_status: 'processing' }); // Immediately update local state to show processing

    try {
      // Update document status to processing in the backend
      await base44.entities.Document.update(document.id, {
        ai_analysis: {
          ...analysis,
          analysis_status: 'processing'
        },
        workspace_id: currentWorkspaceId // CRITICAL: Maintain workspace_id
      });

      const strippedContent = (document.content || '').replace(/<[^>]*>/g, ' ').replace(/\s+/g, ' ').trim();

      const prompt = `Analyze this document and extract the following information:

Document Title: ${document.title}
Content: ${strippedContent.substring(0, 5000)}

Please provide:
1. A concise summary (2-3 sentences)
2. Key points (3-5 bullet points)
3. Important entities mentioned (people, dates, locations, features, requirements)
4. Completeness score (0-100) indicating how complete and well-structured the document is
5. Potential gaps or missing information

Return the analysis in JSON format.`;

      const response = await base44.integrations.Core.InvokeLLM({
        prompt: prompt,
        response_json_schema: {
          type: "object",
          properties: {
            summary: { type: "string" },
            key_points: { type: "array", items: { type: "string" } },
            entities: {
              type: "array",
              items: {
                type: "object",
                properties: {
                  name: { type: "string" },
                  type: { type: "string" },
                  confidence: { type: "number" }
                }
              }
            },
            completeness_score: { type: "number" },
            potential_gaps: { type: "array", items: { type: "string" } }
          },
          required: ["summary", "key_points", "entities", "completeness_score", "potential_gaps"]
        }
      });

      const analysisData = {
        summary: response.summary,
        key_points: response.key_points,
        entities: response.entities,
        completeness_score: response.completeness_score,
        analysis_status: 'completed',
        potential_gaps: response.potential_gaps,
        analyzed_date: new Date().toISOString()
      };

      // CRITICAL: Update document while maintaining workspace_id
      await base44.entities.Document.update(document.id, {
        ai_analysis: analysisData,
        workspace_id: currentWorkspaceId // CRITICAL: Maintain workspace_id
      });

      setAnalysis(analysisData);
      toast.success("Document analysis completed");

      if (onAnalysisComplete) {
        onAnalysisComplete(analysisData);
      }
    } catch (error) {
      console.error("Error analyzing document:", error);
      toast.error("Failed to analyze document: " + (error.message || "Unknown error"));
      
      const failedAnalysis = {
        ...analysis, // Preserve existing analysis data if possible
        analysis_status: 'failed',
        error_message: error.message || "An unknown error occurred during analysis."
      };

      await base44.entities.Document.update(document.id, {
        ai_analysis: failedAnalysis,
        workspace_id: currentWorkspaceId // CRITICAL: Maintain workspace_id
      });

      setAnalysis(failedAnalysis);

    } finally {
      setAnalyzing(false);
    }
  };

  const getStatusIcon = (status) => {
    switch (status) {
      case 'completed': return <CheckCircle className="w-5 h-5 text-green-600" />;
      case 'processing': return <Loader2 className="w-5 h-5 text-blue-600 animate-spin" />;
      case 'failed': return <AlertTriangle className="w-5 h-5 text-red-600" />;
      default: return <Clock className="w-5 h-5 text-gray-400" />;
    }
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'completed': return 'text-green-700 bg-green-50 border-green-200';
      case 'processing': return 'text-blue-700 bg-blue-50 border-blue-200';
      case 'failed': return 'text-red-700 bg-red-50 border-red-200';
      default: return 'text-gray-700 bg-gray-50 border-gray-200';
    }
  };

  const getCompletenessColor = (score) => {
    if (score >= 80) return 'text-green-600';
    if (score >= 60) return 'text-yellow-600';
    return 'text-red-600';
  };

  if (derivedAnalysisStatus === 'pending') {
    return (
      <Card className="border-0 shadow-sm">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Brain className="w-5 h-5 text-purple-600" />
            AI Document Analysis
            <Badge className={`${getStatusColor(derivedAnalysisStatus)} border`}>
              Ready to Analyze
            </Badge>
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="text-center py-8">
            <Brain className="w-16 h-16 mx-auto mb-6 text-purple-300" />
            <div className="space-y-4 mb-6">
              <h3 className="text-xl font-semibold text-gray-900">
                Unlock AI-Powered Document Insights
              </h3>
              <p className="text-gray-600 max-w-md mx-auto">
                Get comprehensive analysis including summaries, key points, entity extraction, and completeness scoring.
              </p>
            </div>
            <Button 
              onClick={handleAnalyze} 
              disabled={analyzing}
              size="lg"
              className="bg-purple-600 hover:bg-purple-700"
            >
              {analyzing ? (
                <>
                  <Loader2 className="w-5 h-5 mr-2 animate-spin" />
                  Starting Analysis...
                </>
              ) : (
                <>
                  <Play className="w-5 h-5 mr-2" />
                  Start AI Analysis
                </>
              )}
            </Button>
          </div>
        </CardContent>
      </Card>
    );
  }

  if (derivedAnalysisStatus === 'processing') {
    return (
      <Card className="border-0 shadow-sm">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Brain className="w-5 h-5 text-purple-600" />
            AI Document Analysis
            <Badge className={`${getStatusColor(derivedAnalysisStatus)} border`}>
              {getStatusIcon(derivedAnalysisStatus)}
              Analyzing...
            </Badge>
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="text-center py-12">
            <Loader2 className="w-16 h-16 mx-auto mb-6 text-purple-500 animate-spin" />
            <div className="space-y-3">
              <h3 className="text-xl font-semibold text-gray-900">
                AI is analyzing your document
              </h3>
              <p className="text-gray-600">
                This may take a few moments depending on document size and complexity...
              </p>
            </div>
            <Progress value={50} className="mt-6 max-w-md mx-auto" />
          </div>
        </CardContent>
      </Card>
    );
  }

  if (derivedAnalysisStatus === 'failed') {
    return (
      <Card className="border-0 shadow-sm border-red-200">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Brain className="w-5 h-5 text-purple-600" />
            AI Document Analysis
            <Badge className={`${getStatusColor(derivedAnalysisStatus)} border`}>
              {getStatusIcon(derivedAnalysisStatus)}
              Failed
            </Badge>
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="text-center py-8">
            <AlertTriangle className="w-16 h-16 mx-auto mb-6 text-red-300" />
            <div className="space-y-3 mb-6">
              <h3 className="text-xl font-semibold text-red-900">
                Analysis could not be completed
              </h3>
              <p className="text-red-600">
                {analysis?.error_message || 'An error occurred during analysis'}
              </p>
            </div>
            <Button 
              onClick={handleAnalyze} 
              disabled={analyzing}
              variant="outline" 
              className="border-red-200 text-red-700 hover:bg-red-50"
            >
              <RefreshCw className="w-4 h-4 mr-2" />
              Retry Analysis
            </Button>
          </div>
        </CardContent>
      </Card>
    );
  }

  // Show completed analysis results
  return (
    <div className="space-y-6">
      {/* Analysis Overview */}
      <Card className="border-0 shadow-sm">
        <CardHeader>
          <CardTitle className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              <Brain className="w-5 h-5 text-purple-600" />
              AI Document Analysis
              <Badge className={`${getStatusColor(derivedAnalysisStatus)} border`}>
                {getStatusIcon(derivedAnalysisStatus)}
                Completed
              </Badge>
            </div>
            <Button 
              onClick={handleAnalyze} 
              disabled={analyzing}
              variant="outline" 
              size="sm"
            >
              <RefreshCw className="w-4 h-4 mr-2" />
              Re-analyze
            </Button>
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {/* Summary */}
          {analysis?.summary && (
            <div>
              <h4 className="font-semibold text-gray-900 mb-2 flex items-center gap-2">
                <FileText className="w-4 h-4 text-blue-600" />
                Summary
              </h4>
              <p className="text-gray-700 bg-blue-50 p-4 rounded-lg border border-blue-200">
                {analysis.summary}
              </p>
            </div>
          )}

          {/* Completeness Score */}
          {typeof analysis?.completeness_score === 'number' && (
            <div>
              <h4 className="font-semibold text-gray-900 mb-2 flex items-center gap-2">
                <Target className="w-4 h-4 text-green-600" />
                Completeness Score
              </h4>
              <div className="flex items-center gap-4">
                <Progress value={analysis.completeness_score || 0} className="flex-1" />
                <span className={`font-bold text-lg ${getCompletenessColor(analysis.completeness_score || 0)}`}>
                  {analysis.completeness_score || 0}%
                </span>
              </div>
            </div>
          )}
        </CardContent>
      </Card>

      {/* Key Points */}
      {analysis?.key_points?.length > 0 && (
        <Card className="border-0 shadow-sm">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Zap className="w-5 h-5 text-yellow-600" />
              Key Points & Requirements
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid gap-3">
              {analysis.key_points.map((point, index) => (
                <div key={index} className="flex items-start gap-3 p-3 bg-yellow-50 rounded-lg border border-yellow-200">
                  <div className="w-6 h-6 bg-yellow-500 text-white rounded-full flex items-center justify-center text-sm font-bold flex-shrink-0">
                    {index + 1}
                  </div>
                  <p className="text-yellow-800">{point}</p>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}

      {/* Extracted Entities */}
      {analysis?.entities?.length > 0 && (
        <Card className="border-0 shadow-sm">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Users className="w-5 h-5 text-purple-600" />
              Extracted Entities
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="flex flex-wrap gap-2">
              {analysis.entities.map((entity, index) => (
                <Badge 
                  key={index} 
                  variant="outline" 
                  className="flex items-center gap-2"
                >
                  <span>{entity.name}</span>
                  <span className="text-xs text-gray-500">({entity.type})</span>
                  {entity.confidence && <span className="text-xs text-blue-600">{entity.confidence}%</span>}
                </Badge>
              ))}
            </div>
          </CardContent>
        </Card>
      )}

      {/* Original sections that are no longer part of the current LLM output.
          They will only render if the 'analysis' object happens to contain them
          from previous analysis or other means.
      */}

      {/* Document Relationships */}
      {analysis?.relationships?.length > 0 && (
        <Card className="border-0 shadow-sm">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Link2 className="w-5 h-5 text-blue-600" />
              Related Documents
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              {analysis.relationships.map((rel, index) => (
                <div key={index} className="flex items-start justify-between p-4 bg-blue-50 rounded-lg border border-blue-200">
                  <div className="flex-1">
                    <p className="font-medium text-blue-900">
                      {rel.document_title || `Document #${rel.document_id}`}
                    </p>
                    <p className="text-sm text-blue-700 mt-1">
                      <strong>Relationship:</strong> {rel.relationship_type}
                    </p>
                    {rel.relationship_reason && (
                      <p className="text-sm text-blue-600 mt-1">
                        {rel.relationship_reason}
                      </p>
                    )}
                  </div>
                  <Badge className="bg-blue-100 text-blue-800">
                    {rel.confidence || 0}% match
                  </Badge>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}

      {/* Conflicts */}
      {analysis?.conflicts?.length > 0 && (
        <Card className="border-0 shadow-sm border-red-200">
          <CardHeader>
            <CardTitle className="flex items-center gap-2 text-red-700">
              <AlertTriangle className="w-5 h-5" />
              Detected Conflicts
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              {analysis.conflicts.map((conflict, index) => (
                <div key={index} className="p-4 bg-red-50 rounded-lg border border-red-200">
                  <div className="flex items-start justify-between mb-2">
                    <div className="flex-1">
                      <p className="font-medium text-red-900">{conflict.description}</p>
                      <p className="text-sm text-red-700 mt-1">
                        Conflicts with: <strong>{conflict.conflicting_document_title || `Document #${conflict.conflicting_document_id}`}</strong>
                      </p>
                      {conflict.details && (
                        <p className="text-sm text-red-600 mt-2">
                          {conflict.details}
                        </p>
                      )}
                    </div>
                    <Badge className={
                      conflict.severity === 'high' ? 'bg-red-500 text-white' :
                      conflict.severity === 'medium' ? 'bg-yellow-500 text-white' : 'bg-gray-500 text-white'
                    }>
                      {conflict.severity} severity
                    </Badge>
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}

      {/* Potential Gaps */}
      {analysis?.potential_gaps?.length > 0 && (
        <Card className="border-0 shadow-sm border-orange-200">
          <CardHeader>
            <CardTitle className="flex items-center gap-2 text-orange-700">
              <AlertTriangle className="w-5 h-5" />
              Potential Information Gaps
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-2">
              {analysis.potential_gaps.map((gap, index) => (
                <div key={index} className="flex items-center gap-3 p-3 bg-orange-50 rounded-lg border border-orange-200">
                  <AlertTriangle className="w-4 h-4 text-orange-500 flex-shrink-0" />
                  <p className="text-orange-800">{gap}</p>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
}
